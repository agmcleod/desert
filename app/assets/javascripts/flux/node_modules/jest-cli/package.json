{
  "name": "jest-cli",
  "description": "Painless JavaScript Unit Testing.",
  "version": "0.1.18",
  "main": "bin/jest.js",
  "dependencies": {
    "coffee-script": "1.7.1",
    "cover": "~0.2.8",
    "diff": "~1.0.4",
    "graceful-fs": "^2.0.3",
    "harmonize": "~1.33.7",
    "jasmine-only": "0.1.0",
    "jasmine-pit": "~1.0.0",
    "jsdom": "~0.10.3",
    "node-find-files": "~0.0.2",
    "node-haste": "^1.2.5",
    "node-worker-pool": "~2.4.0",
    "optimist": "~0.6.0",
    "q": "~0.9.7",
    "resolve": "~0.6.1",
    "underscore": "1.2.4"
  },
  "devDependencies": {
    "jshint": "~2.5.0"
  },
  "bin": {
    "jest": "./bin/jest.js"
  },
  "engines": {
    "node": "0.8.x || 0.10.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/facebook/jest"
  },
  "scripts": {
    "prepublish": "jshint --config=.jshintrc --exclude=src/coverageTemplate.js src && node bin/jest.js",
    "test": "jshint --config=.jshintrc --exclude=src/coverageTemplate.js src && node bin/jest.js"
  },
  "jest": {
    "rootDir": "src",
    "testPathIgnorePatterns": [
      "/__tests__/[^/]*/.+"
    ]
  },
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "homepage": "http://facebook.github.io/jest/",
  "keywords": [
    "facebook",
    "jest",
    "test",
    "unit",
    "jasmine",
    "mock"
  ],
  "license": "BSD",
  "readme": "# [Jest](http://facebook.github.io/jest/) [![Build Status](https://travis-ci.org/facebook/jest.svg?branch=master)](https://travis-ci.org/facebook/jest)\n\nPainless JavaScript Unit Testing\n\n- **Familiar Approach**: Built on top of the Jasmine test framework, using familiar expect(value).toBe(other) assertions\n\n- **Mock by Default**: Automatically mocks CommonJS modules returned by require(), making most existing code testable\n\n- **Short Feedback Loop**: DOM APIs are mocked and tests run in parallel via a small node.js command line utility\n\n## Getting Started\n\nCheck out the [Getting Started](http://facebook.github.io/jest/docs/getting-started.html) tutorial. It's pretty simple!\n\n## API\n\n<generated_api_start />\n#### The `jest` object\n\n  - [`jest.autoMockOff()`](http://facebook.github.io/jest/docs/api.html#jest-automockoff)\n  - [`jest.autoMockOn()`](http://facebook.github.io/jest/docs/api.html#jest-automockon)\n  - [`jest.clearAllTimers()`](http://facebook.github.io/jest/docs/api.html#jest-clearalltimers)\n  - [`jest.dontMock(moduleName)`](http://facebook.github.io/jest/docs/api.html#jest-dontmock-modulename)\n  - [`jest.genMockFromModule(moduleObj)`](http://facebook.github.io/jest/docs/api.html#jest-genmockfrommodule-moduleobj)\n  - [`jest.genMockFunction()`](http://facebook.github.io/jest/docs/api.html#jest-genmockfunction)\n  - [`jest.genMockFn()`](http://facebook.github.io/jest/docs/api.html#jest-genmockfn)\n  - [`jest.mock(moduleName)`](http://facebook.github.io/jest/docs/api.html#jest-mock-modulename)\n  - [`jest.runAllTicks()`](http://facebook.github.io/jest/docs/api.html#jest-runallticks)\n  - [`jest.runAllTimers()`](http://facebook.github.io/jest/docs/api.html#jest-runalltimers)\n  - [`jest.runOnlyPendingTimers()`](http://facebook.github.io/jest/docs/api.html#jest-runonlypendingtimers)\n  - [`jest.setMock(moduleName, moduleExports)`](http://facebook.github.io/jest/docs/api.html#jest-setmock-modulename-moduleexports)\n\n#### Mock functions\n\n  - [`mockFn.mock.calls`](http://facebook.github.io/jest/docs/api.html#mockfn-mock-calls)\n  - [`mockFn.mock.instances`](http://facebook.github.io/jest/docs/api.html#mockfn-mock-instances)\n  - [`mockFn.mockClear()`](http://facebook.github.io/jest/docs/api.html#mockfn-mockclear)\n  - [`mockFn.mockImplementation(fn)`](http://facebook.github.io/jest/docs/api.html#mockfn-mockimplementation-fn)\n  - [`mockFn.mockImpl(fn)`](http://facebook.github.io/jest/docs/api.html#mockfn-mockimpl-fn)\n  - [`mockFn.mockReturnThis()`](http://facebook.github.io/jest/docs/api.html#mockfn-mockreturnthis)\n  - [`mockFn.mockReturnValue(value)`](http://facebook.github.io/jest/docs/api.html#mockfn-mockreturnvalue-value)\n  - [`mockFn.mockReturnValueOnce(value)`](http://facebook.github.io/jest/docs/api.html#mockfn-mockreturnvalueonce-value)\n\n#### Config options\n\n  - [`config.cacheDirectory` [string]](http://facebook.github.io/jest/docs/api.html#config-cachedirectory-string)\n  - [`config.collectCoverage` [boolean]](http://facebook.github.io/jest/docs/api.html#config-collectcoverage-boolean)\n  - [`config.collectCoverageOnlyFrom` [object]](http://facebook.github.io/jest/docs/api.html#config-collectcoverageonlyfrom-object)\n  - [`config.globals` [object]](http://facebook.github.io/jest/docs/api.html#config-globals-object)\n  - [`config.moduleFileExtensions` [array<string>]](http://facebook.github.io/jest/docs/api.html#config-modulefileextensions-array-string)\n  - [`config.modulePathIgnorePatterns` [array<string>]](http://facebook.github.io/jest/docs/api.html#config-modulepathignorepatterns-array-string)\n  - [`config.rootDir` [string]](http://facebook.github.io/jest/docs/api.html#config-rootdir-string)\n  - [`config.scriptPreprocessor` [string]](http://facebook.github.io/jest/docs/api.html#config-scriptpreprocessor-string)\n  - [`config.setupEnvScriptFile` [string]](http://facebook.github.io/jest/docs/api.html#config-setupenvscriptfile-string)\n  - [`config.setupTestFrameworkScriptFile` [string]](http://facebook.github.io/jest/docs/api.html#config-setuptestframeworkscriptfile-string)\n  - [`config.testDirectoryName` [string]](http://facebook.github.io/jest/docs/api.html#config-testdirectoryname-string)\n  - [`config.testFileExtensions` [array<string>]](http://facebook.github.io/jest/docs/api.html#config-testfileextensions-array-string)\n  - [`config.testPathDirs` [array<string>]](http://facebook.github.io/jest/docs/api.html#config-testpathdirs-array-string)\n  - [`config.testPathIgnorePatterns` [array<string>]](http://facebook.github.io/jest/docs/api.html#config-testpathignorepatterns-array-string)\n  - [`config.unmockedModulePathPatterns` [array<string>]](http://facebook.github.io/jest/docs/api.html#config-unmockedmodulepathpatterns-array-string)\n\n#### Globally injected variables\n\n  - `afterEach(fn)`\n  - `beforeEach(fn)`\n  - `describe(name, fn)`\n  - `it(name, fn)`\n  - `it.only(name, fn)` executes [only](https://github.com/davemo/jasmine-only) this test. Useful when investigating a failure\n  - [`jest`](http://facebook.github.io/jest/docs/api.html#the-jest-object)\n  - `pit(name, fn)` [helper](https://www.npmjs.org/package/jasmine-pit) for promises\n  - `require(module)`\n  - `require.requireActual(module)`\n  - `xdescribe(name, fn)`\n  - `xit(name, fn)`\n\n#### `expect(value)`\n\n  - `.not` inverse the next comparison\n  - `.toThrow(?message)`\n  - `.toBe(value)` comparison using `===`\n  - `.toEqual(value)` deep comparison. Use [`jasmine.any(type)`](http://jasmine.github.io/1.3/introduction.html#section-Matching_Anything_with_<code>jasmine.any</code>) to be softer\n  - `.toBeFalsy()`\n  - `.toBeTruthy()`\n  - `.toBeNull()`\n  - `.toBeUndefined()`\n  - `.toBeDefined()`\n  - `.toMatch(regexp)`\n  - `.toContain(string)`\n  - `.toBeCloseTo(number, delta)`\n  - `.toBeGreaterThan(number)`\n  - `.toBeLessThan(number)`\n  - `.toBeCalled()`\n  - `.toBeCalledWith(arg, um, ents)`\n  - `.lastCalledWith(arg, um, ents)`\n\n<generated_api_end />\n",
  "readmeFilename": "README.md",
  "_id": "jest-cli@0.1.18",
  "_from": "jest-cli@~0.1.17"
}
